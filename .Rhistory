93.0
66.0
10.0
0
0
B
16.5
1
M
60.0
27.0
22.4
0
0
B
40.8
4
M
91.6
55.2
9.4
0
1
H
30.8
2
M
59.2
31.9
11.2
1
1
H
19.5
3
C
79.0
50.3
9.1
1
0
B
75.0
4
Π
176.0
129.0
15.0
1
1
B
16.0
2
K
50.1
31.0
6.0
0
0
B
21.3
1
Π
39.9
18.0
8.1
1
0
H
53.9
3
Π
98.0
56.0
22.0
1
1
H"
fix_x <- gsub("\n", " ", x)
y <- strsplit(fix_x, " ")[1]
length(unlist(y))
q <- matrix(data  = unlist(y), ncol = 9, byrow = T)
q
x_43_53 <- "32.6
3
M
68.0
42.5
8.3
0
1
H
25.8
2
C
80.0
51.0
13.0
0
1
B
27.0
4
K
93.0
66.0
10.0
0
0
B
16.5
1
M
60.0
27.0
22.4
0
0
B
40.8
4
M
91.6
55.2
9.4
0
1
H
30.8
2
M
59.2
31.9
11.2
1
1
H
19.5
3
C
79.0
50.3
9.1
1
0
B
75.0
4
Π
176.0
129.0
15.0
1
1
B
16.0
2
K
50.1
31.0
6.0
0
0
B
21.3
1
Π
39.9
18.0
8.1
1
0
H
53.9
3
Π
98.0
56.0
22.0
1
1
H"
x <- "15.9
21.1
24.5
1
2
4
C
C
39.0
90.0
64.0
15.0
0
0
H
27.0
3
K
C
68.4
54.7
40.5
28.0
20.0
8.2
10.7
10.7
0
0
0
1
H
H
1
1
B"
fix_x <- gsub("\n", " ", x)
y <- strsplit(fix_x, " ")[1]
length(unlist(y))
q <- matrix(data  = unlist(y), ncol = 9, byrow = T)
q
unlist(y)
x <- "15.9 1 C 39.0 20.0 8.2 0 1 H
27.0 3 K 68.4 40.5 10.7 0 1 H
21.1 2 K 54.7 28.0 10.7 0 1 H
24.5 3 C 90.0 64.0 15.0 0 0 B"
fix_x <- gsub("\n", " ", x)
y <- strsplit(fix_x, " ")[1]
length(unlist(y))
q <- matrix(data  = unlist(y), ncol = 9, byrow = T)
q
x_1_4 <- "15.9 1 C 39.0 20.0 8.2 0 1 H
27.0 3 K 68.4 40.5 10.7 0 1 H
21.1 2 K 54.7 28.0 10.7 0 1 H
24.5 3 C 90.0 64.0 15.0 0 0 B"
x <- paste(x_1_4,x_5_42,x_43_53)
fix_x <- gsub("\n", " ", x)
y <- strsplit(fix_x, " ")[1]
length(unlist(y))
477 / 9
q <- matrix(data  = unlist(y), ncol = 9, byrow = T)
q
df <- data.frame(q)
colnames(df) <- c("Y1", "X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8")
df
typeof(df$Y1)
df$Y1 <- as.double(df$Y1)
df$Y1
df
#x1 x3 x4 x5 x6 x7
df$X1
#x1 x3 x4 x5 x6 x7
names <- c("X1", "X3", "X4", "X5", "X6", "X7")
for( i in 1:length(names)){
df[names[i]] <- as.double(df[names[i]])
}
for( i in 1:length(names)){
print(i)
df[names[i]] <- as.double(df[names[i]])
}
df$X1 <- as.double(df$X1)
df$X3 <- as.double(df$X3)
df$X4 <- as.double(df$X4)
df$X5 <- as.double(df$X5)
df$X6 <- as.double(df$X6)
df$X7 <- as.double(df$X7)
df
write.csv(df, "D:\\Econometrics/data_1.csv", row.names=FALSE)
data = read.csv("data_1.csv")
lm(Y1 ~ ., data = data)
new_building <- data[data$X8 = "H"]
new_building <- data[data$X8 == "H"]
ata$X8 == "H"
data$X8 == "H"
new_building <- data[data$X8 == "H"]
ubset(data, X8 = "H")
new_building <-
ubset(data, X8 = "H")
subset(data, X8 = "H")
subset(data, X8 == "H")
new_building <- subset(data, X8 == "H")
old_building <- subset(data, X8 == "B")
lm(Y1 ~ ., data = new_building)
new_building
new_building$Y1
lm(Y1 ~ ., data = new_building)
new_building
lm(Y1 ~ X1 + X2 + X3 + X4 + X5 + X6 + X7, data = new_building)
lm(Y1 ~ X1 + X2 + X3 + X4 + X5 + X6 + X7, data = old_building)
data
# task 1
CK_building <- subset(data, X2== c("C","K"))
# task 1
CK_building <- subset(data, X2 == "C")
CK_building
CK_building
# task 1
CK_building <- subset(data, X2 == "C")
CK_building
# task 1
CK_building <- rbind(subset(data, X2 == "C"),
subset(data, X2 == "K"))
CK_building
lm(Y1 ~ X1  + X3 + X4 + X5 + X6 + X7 + X8, data = CK_building)
head(data)
data
PM_building <- rbind(subset(data, X2 == "П"),
subset(data, X2 == "М"))
lm(Y1 ~ X1 + X2 + X3 + X4 + X5 + X6 + X7, data = PM_building)
lm(Y1 ~ X1 + X3 + X4 + X5 + X6 + X7 + X8, data = PM_building)
PM_building <- rbind(subset(data, X2 == "П"),
subset(data, X2 == "М"))
PM_building
subset(data, X2 == "П")
data$X2
data$X2[8]
subset(data, X2 == "Π")
ubset(data, X2 == "М")
data$X2
PM_building <- rbind(subset(data, X2 == "Π"),
subset(data, X2 == "M"))
PM_building <- rbind(subset(data, X2 == "Π"),
subset(data, X2 == "M"))
lm(Y1 ~ X1 + X3 + X4 + X5 + X6 + X7 + X8, data = PM_building)
View(new_building)
F.kr <- qf(1 - 0.05, 5 - 1, 25 - 5)
F.kr
F.kr <- qf(1 - 0.05, 6 - 1, 25 - 5)
F.kr <- qf(1 - 0.05, 6 - 1, 25 - 5)
F.kr
F.kr <- qf(1 - 0.05, 5 - 1, 25 - 6)
F.kr
F.kr <- qf(1 - 0.05, 5 - 1, 25 - 4)
F.kr
F.kr <- qf(1 - 0.05, 5 - 2, 25 - 4)
F.kr
F.kr <- qf(1 - 0.05, 5 - 1, 25 - 5)
F.kr
data = read.csv("D://Econometrics/data.csv")
r <- cor(data[1:25, c(3+1, 3+10, 3+11, 3+14)])
Z <- solve(r)
Z
eigen_vector <- eigen(Z)$vectors
eigen_values <- eigen(Z)$values
eigen_values
eigen_vector
eigen(Z)
eigen_vector <- eigen(R)$vectors
eigen_vector <- eigen(r)$vectors
eigen_values <- eigen(r)$values
eigen(r)
r
eigen(Z)
data = read.csv("D://Econometrics/data.csv")
r <- cor(data[1:25, c(3+1, 3+10, 3+11, 3+14)])
Z <- solve(r)
eigen(r)
eigen(Z)
eigen_vector <- eigen(r)$vectors
eigen_values <- eigen(r)$values
as.matrix(eigen_vector ) %*% as.matrix(eigen_values)
eigen_values
L <- matrix(rep(0, 4 * 4), ncol = 4)
diag(L) <- eigen_values
as.matrix(eigen_vector) %*% L^(1/2)
eigen_values
eigen_vector
eigen_vector[1,4] = eigen_vector[1,4] * (-1)
eigen_vector
# part 3
eigen_vector <- eigen(r)$vectors
eigen_vector[,4] = eigen_vector[,4] * (-1)
eigen_vector
as.matrix(eigen_vector) %*% L^(1/2)
L %*% as.matrix(eigen_vector) ^ (1/2)
as.matrix(eigen_vector) ^ (1/2)
L %*% as.matrix(eigen_vector)
L^(1/2) %*% as.matrix(eigen_vector)
t(as.matrix(eigen_vector)) %*% L^(1/2)
# part 3
eigen_vector <- eigen(r)$vectors
t(as.matrix(eigen_vector)) %*% L^(1/2)
# part 3
eigen_vector <- eigen(r)$vectors
#test_data_wacor = read.csv("test_data_without_autocor")
#cor(test_data_wacor[,3:6])
x <- data[1:25, c(3+1, 3+10, 3+11, 3+14)]
x
as.matrix(eigen_vector) %*% t(x)
#test_data_wacor = read.csv("test_data_without_autocor")
#cor(test_data_wacor[,3:6])
x <- data[1:25, c(3+1, 3+10, 3+11, 3+14)]
data = read.csv("D://Econometrics/data.csv")
#test_data_wacor = read.csv("test_data_without_autocor")
#cor(test_data_wacor[,3:6])
x <- data[1:25, c(3+1, 3+10, 3+11, 3+14)]
r <- cor(data[1:25, c(3+1, 3+10, 3+11, 3+14)])
eigen_vector <- eigen(r)$vectors
eigen_values <- eigen(r)$values
as.matrix(eigen_vector) %*% t(x)
X <- (x - mean(x))/ sd(x)
mean(x)
sapply(x,mean)
X <- (x - sapply(x,mean))/ sapply(x,sd)
as.matrix(eigen_vector) %*% t(X)
eigen_vector
as.matrix(eigen_vector) %*% t(X)
eigen_vector[,4] = eigen_vector[,4] * (-1)
as.matrix(eigen_vector) %*% t(X)
eigen_vector <- eigen(r)$vectors
eigen_values <- eigen(r)$values
as.matrix(eigen_vector) %*% t(X)
sapply(x,sd)
X <- (x - sapply(x,mean))/ sapply(x,var)
x <- data[1:25, c(3+1, 3+10, 3+11, 3+14)]
X <- (x - sapply(x,mean))/ sapply(x,sd)
X <- (x - sapply(x,mean))/ sapply(x,sd)
as.matrix(eigen_vector) %*% t(X)
X
t(as.matrix(eigen_vector)) %*% t(X)
eig_val <- df(eigen_value)
eig_val <- df(eigen_vector)
eig_val <- data.frame(eigen_vector)
colnames(eig_val) <- eigen_values
eig_val_sort <- sort(colnames(df))
eig_val_sort
colnames(eig_val)
eig_val_sort <- sort(as.double(colnames(df)))
eig_val_sort
as.double(colnames(df))
eig_val
t(as.matrix(eig_vec)) %*% t(X)
t(as.matrix(eig_val)) %*% t(X)
#test_data_wacor = read.csv("test_data_without_autocor")
#cor(test_data_wacor[,3:6])
x <- data[1:25, c(3+1, 3+10, 3+11, 3+14)]
data = read.csv("D://Econometrics/data.csv")
x <- data[1:25, c(3+1, 3+10, 3+11, 3+14)]
X <- (x - sapply(x,mean))/ sapply(x,sd)
r <- cor(data[1:25, c(3+1, 3+10, 3+11, 3+14)])
eigen_vector <- eigen(r)$vectors
eigen_values <- eigen(r)$values
eig_vec <- data.frame(eigen_vector)
colnames(eig_vec) <- eigen_values
eig_vec
igen_vector
eigen_vector
eigen_values
t(as.matrix(eigen_vector)) %*% t(X)
X.st <- (x - sapply(x,mean))/ sapply(x,sd)
data = read.csv("D://Econometrics/data.csv")
x <- data[1:25, c(3+1, 3+10, 3+11, 3+14)]
X.st <- (x - sapply(x,mean))/ sapply(x,sd)
r <- cor(data[1:25, c(3+1, 3+10, 3+11, 3+14)])
eigen_vector <- eigen(r)$vectors
eigen_values <- eigen(r)$values
t(as.matrix(eigen_vector)) %*% t(X.st)
eigen_vector[,4] = eigen_vector[,4] * (-1)
t(as.matrix(eigen_vector)) %*% t(X.st)
t(as.matrix(eigen_vector)) %*% X.st
X.st %*%  as.matrix(eigen_vector)
X.st %*% as.matrix(eigen_vector)
s.matrix(eigen_vector)
as.matrix(eigen_vector)
X.st
- sapply(x,mean)
x - sapply(x,mean)
sapply(x,sd)
x - sapply(x,mean)
x
sapply(x,mean)
sapply(x,sd)
typeof(sapply(x,mean))
t(sapply(x,mean))
X.st <- (t(x) - sapply(x,mean) )/ sapply(x,sd)
X.st
t(as.matrix(eigen_vector)) %*% X.st
# part 3
eigen_vector <- eigen(r)$vectors
t(as.matrix(eigen_vector)) %*% X.st
eigen_vector[,4] = eigen_vector[,4] * (-1)
t(as.matrix(eigen_vector)) %*% X.st
.st
X.st
X.st %*%  as.matrix(eigen_vector)
t(X.st) %*%  as.matrix(eigen_vector)
princomp(X.st)
princomp(t(X.st))
p <- princomp(t(X.st))
View(p)
View(p)
summary(p)
s < -summary(p)
s <- summary(p)
View(s)
View(s)
p$loadings
p$loadings[, 1:2]
p$loadings[, 1:3]
install.packages("factoextra")
library(factoextra)
fviz_pca_var(p, col.var = "black")
# part 3
eigen_vector <- eigen(r)$vectors
eigen_vector
install.packages(c("backports", "brio", "broom", "bslib", "cachem", "callr", "cli", "cowplot", "cpp11", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "deldir", "desc", "digest", "dplyr", "DT", "e1071", "emmeans", "estimability", "FactoMineR", "fansi", "farver", "fastmap", "fs", "geometries", "ggplot2", "ggrepel", "ggsci", "glue", "gtable", "haven", "highr", "htmltools", "htmlwidgets", "httpuv", "jsonlite", "knitr", "later", "leaflet", "lifecycle", "lme4", "lwgeom", "MatrixModels", "mclust", "minqa", "multcompView", "munsell", "mvtnorm", "openssl", "pkgbuild", "pkgload", "processx", "progress", "promises", "ps", "quantreg", "ragg", "Rcpp", "RcppEigen", "readr", "reprex", "rlang", "rmarkdown", "rstudioapi", "rvest", "s2", "sass", "scales", "sf", "sfheaders", "sp", "SparseM", "spData", "spdep", "stars", "stringi", "stringr", "systemfonts", "terra", "testthat", "textshaping", "tidyr", "tidyselect", "timechange", "tinytex", "units", "uuid", "vctrs", "viridis", "vroom", "withr", "wk", "xfun", "XML", "xml2", "yaml", "yulab.utils"))
install.packages(c("backports", "brio", "broom", "bslib", "cachem", "callr", "cli", "cowplot", "cpp11", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "deldir", "desc", "digest", "dplyr", "DT", "e1071", "emmeans", "estimability", "FactoMineR", "fansi", "farver", "fastmap", "fs", "geometries", "ggplot2", "ggrepel", "ggsci", "glue", "gtable", "haven", "highr", "htmltools", "htmlwidgets", "httpuv", "jsonlite", "knitr", "later", "leaflet", "lifecycle", "lme4", "lwgeom", "MatrixModels", "mclust", "minqa", "multcompView", "munsell", "mvtnorm", "openssl", "pkgbuild", "pkgload", "processx", "progress", "promises", "ps", "quantreg", "ragg", "Rcpp", "RcppEigen", "readr", "reprex", "rlang", "rmarkdown", "rstudioapi", "rvest", "s2", "sass", "scales", "sf", "sfheaders", "sp", "SparseM", "spData", "spdep", "stars", "stringi", "stringr", "systemfonts", "terra", "testthat", "textshaping", "tidyr", "tidyselect", "timechange", "tinytex", "units", "uuid", "vctrs", "viridis", "vroom", "withr", "wk", "xfun", "XML", "xml2", "yaml", "yulab.utils"))
install.packages(c("backports", "brio", "broom", "bslib", "cachem", "callr", "cli", "cowplot", "cpp11", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "deldir", "desc", "digest", "dplyr", "DT", "e1071", "emmeans", "estimability", "FactoMineR", "fansi", "farver", "fastmap", "fs", "geometries", "ggplot2", "ggrepel", "ggsci", "glue", "gtable", "haven", "highr", "htmltools", "htmlwidgets", "httpuv", "jsonlite", "knitr", "later", "leaflet", "lifecycle", "lme4", "lwgeom", "MatrixModels", "mclust", "minqa", "multcompView", "munsell", "mvtnorm", "openssl", "pkgbuild", "pkgload", "processx", "progress", "promises", "ps", "quantreg", "ragg", "Rcpp", "RcppEigen", "readr", "reprex", "rlang", "rmarkdown", "rstudioapi", "rvest", "s2", "sass", "scales", "sf", "sfheaders", "sp", "SparseM", "spData", "spdep", "stars", "stringi", "stringr", "systemfonts", "terra", "testthat", "textshaping", "tidyr", "tidyselect", "timechange", "tinytex", "units", "uuid", "vctrs", "viridis", "vroom", "withr", "wk", "xfun", "XML", "xml2", "yaml", "yulab.utils"))
install.packages(c("backports", "brio", "broom", "bslib", "cachem", "callr", "cli", "cowplot", "cpp11", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "deldir", "desc", "digest", "dplyr", "DT", "e1071", "emmeans", "estimability", "FactoMineR", "fansi", "farver", "fastmap", "fs", "geometries", "ggplot2", "ggrepel", "ggsci", "glue", "gtable", "haven", "highr", "htmltools", "htmlwidgets", "httpuv", "jsonlite", "knitr", "later", "leaflet", "lifecycle", "lme4", "lwgeom", "MatrixModels", "mclust", "minqa", "multcompView", "munsell", "mvtnorm", "openssl", "pkgbuild", "pkgload", "processx", "progress", "promises", "ps", "quantreg", "ragg", "Rcpp", "RcppEigen", "readr", "reprex", "rlang", "rmarkdown", "rstudioapi", "rvest", "s2", "sass", "scales", "sf", "sfheaders", "sp", "SparseM", "spData", "spdep", "stars", "stringi", "stringr", "systemfonts", "terra", "testthat", "textshaping", "tidyr", "tidyselect", "timechange", "tinytex", "units", "uuid", "vctrs", "viridis", "vroom", "withr", "wk", "xfun", "XML", "xml2", "yaml", "yulab.utils"))
install.packages(c("backports", "brio", "broom", "bslib", "cachem", "callr", "cli", "cowplot", "cpp11", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "deldir", "desc", "digest", "dplyr", "DT", "e1071", "emmeans", "estimability", "FactoMineR", "fansi", "farver", "fastmap", "fs", "geometries", "ggplot2", "ggrepel", "ggsci", "glue", "gtable", "haven", "highr", "htmltools", "htmlwidgets", "httpuv", "jsonlite", "knitr", "later", "leaflet", "lifecycle", "lme4", "lwgeom", "MatrixModels", "mclust", "minqa", "multcompView", "munsell", "mvtnorm", "openssl", "pkgbuild", "pkgload", "processx", "progress", "promises", "ps", "quantreg", "ragg", "Rcpp", "RcppEigen", "readr", "reprex", "rlang", "rmarkdown", "rstudioapi", "rvest", "s2", "sass", "scales", "sf", "sfheaders", "sp", "SparseM", "spData", "spdep", "stars", "stringi", "stringr", "systemfonts", "terra", "testthat", "textshaping", "tidyr", "tidyselect", "timechange", "tinytex", "units", "uuid", "vctrs", "viridis", "vroom", "withr", "wk", "xfun", "XML", "xml2", "yaml", "yulab.utils"))
